{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","selectId","selectedUserId","changeCompleted","className","classnames","completed","type","checked","onChange","id","title","userId","onClick","TodoList","todos","titleQuery","selectValue","newTodo","filter","includes","map","getData","endpoint","a","url","fetch","data","ok","Error","status","json","getTodos","getUser","CurrentUser","useState","user","setUser","hasUserErrorFromServer","setHasUserErrorFromServer","useEffect","then","newUser","catch","name","email","phone","App","setTitleQuery","setSelectValue","setSelectedUserId","hasErrorFromServer","setHasErrorFromServer","setTodos","response","placeholder","value","e","target","event","defaultValue","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef2bfeff.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\n\nimport classnames from 'classnames';\nimport { TodoType } from '../../react-app-env';\n\nexport const TodoItem: React.FC<TodoType> = ({\n  todo, selectId, selectedUserId, changeCompleted,\n}) => {\n  return (\n    <li\n      className={classnames(\n        'TodoList__item',\n        { 'TodoList__item--unchecked': !todo.completed },\n        { 'TodoList__item--checked': todo.completed },\n      )}\n\n    >\n      <label>\n        <input type=\"checkbox\" checked={todo.completed} onChange={() => changeCompleted(todo.id)} />\n        <p>{todo.title}</p>\n      </label>\n\n      <button\n        className={classnames(\n          'button',\n          'TodoList__user-button',\n          { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n        )}\n        type=\"button\"\n        onClick={() => selectId(todo.userId)}\n      >\n        {`User#${todo.userId}`}\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport './TodoList.scss';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nimport { TodoListType } from '../../react-app-env';\n\nexport const TodoList: React.FC<TodoListType> = ({\n  todos,\n  selectId,\n  selectedUserId,\n  changeCompleted,\n  titleQuery,\n  selectValue,\n}) => {\n  const newTodo = todos.filter(todo => {\n    switch (selectValue) {\n      case 'completedTodos':\n        return todo.completed;\n      case 'notCompletedTodos':\n        return !todo.completed;\n      default:\n        return todo;\n    }\n  }).filter(todo => todo.title.includes(titleQuery));\n\n  return (\n    <div className=\"TodoList\">\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {newTodo.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              selectId={selectId}\n              selectedUserId={selectedUserId}\n              changeCompleted={changeCompleted}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getData = async (endpoint: string, id: number | string) => {\n  const url = BASE_URL + endpoint + id;\n  const data = await fetch(url);\n\n  if (!data.ok) {\n    throw new Error(`Error: ${data.status}`);\n  }\n\n  return data.json();\n};\n\nexport const getTodos = async () => getData('/todos', '');\n\nexport const getUser = async (id: number) => getData('/users', `/${id}`);\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\n\nimport { User } from '../../react-app-env';\n\ntype ICurerntUser = {\n  userId: number,\n};\n\nexport const CurrentUser: React.FC<ICurerntUser> = ({ userId }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasUserErrorFromServer, setHasUserErrorFromServer] = useState(false);\n\n  useEffect(() => {\n    getUser(userId)\n      .then((newUser: User) => setUser(newUser))\n      .catch(() => setHasUserErrorFromServer(true));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {!hasUserErrorFromServer ? (\n        user?.id !== userId ? (<h2>Loading...</h2>) : (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${userId}`}</span></h2>\n\n            <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n            <p className=\"CurrentUser__email\">{user?.email}</p>\n            <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          </>\n        )\n      ) : (\n        <h2>Can`t load data</h2>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Todo } from './react-app-env';\n\nconst App: React.FC = () => {\n  const [titleQuery, setTitleQuery] = useState('');\n  const [selectValue, setSelectValue] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [hasErrorFromServer, setHasErrorFromServer] = useState(false);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(response => setTodos(response))\n      .catch(() => setHasErrorFromServer(true));\n  }, []);\n\n  const changeCompleted = (todoId: number) => {\n    setTodos([...todos].map((todo) => {\n      if (todo.id === todoId) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    }));\n  };\n\n  useEffect(() => {\n    setTodos([...todos]);\n  }, [titleQuery, selectValue, selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <button type=\"button\" className=\"button\" onClick={() => setSelectedUserId(0)}>Clear</button>\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__nav\">\n          <input\n            type=\"text\"\n            className=\"TodoList__input\"\n            placeholder=\"search\"\n            value={titleQuery}\n            onChange={(e) => setTitleQuery(e.target.value)}\n          />\n          <select\n            name=\"select\"\n            value={selectValue}\n            onChange={(event) => setSelectValue(event.target.value)}\n          >\n            <option defaultValue=\"allTodos\">all</option>\n            <option value=\"completedTodos\">completed</option>\n            <option value=\"notCompletedTodos\">need to complete</option>\n          </select>\n        </div>\n\n        {!hasErrorFromServer ? (\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            selectValue={selectValue}\n            titleQuery={titleQuery}\n            selectId={id => setSelectedUserId(id)}\n            changeCompleted={changeCompleted}\n          />\n        ) : (<p className=\"App__error\">Oops... Can`t read data from server</p>)}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}