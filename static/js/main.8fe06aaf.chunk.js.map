{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","selectId","activeUser","changeCompleted","className","classnames","completed","type","checked","onChange","id","userId","onClick","TodoList","todos","filtered","selectFilter","filter","title","includes","map","BASE_URL","getTodos","a","fetch","ok","Error","status","json","getUser","user","CurrentUser","useState","setUser","useEffect","then","newUser","name","email","phone","App","setFiltered","setSelectFilter","selectUserId","setSelectUserId","errorFromServer","setErrorFromServer","setTodos","response","catch","setNewFilter","value","placeholder","e","target","defaultValue","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fe06aaf.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\n\nimport classnames from 'classnames';\nimport { TodoType } from '../../react-app-env';\n\nexport const TodoItem: React.FC<TodoType> = ({\n  todo, selectId, activeUser, changeCompleted,\n}) => {\n  return (\n    <li\n      className={classnames(\n        'TodoList__item',\n        { 'TodoList__item--unchecked': !todo.completed },\n        { 'TodoList__item--checked': todo.completed },\n      )}\n\n    >\n      <label>\n        <input type=\"checkbox\" checked={todo.completed} onChange={() => changeCompleted(todo.id)} />\n        <p>delectus aut autem</p>\n      </label>\n\n      <button\n        className={classnames(\n          'button',\n          'TodoList__user-button',\n          { 'TodoList__user-button--selected': activeUser === todo.userId },\n        )}\n        type=\"button\"\n        onClick={() => selectId(todo.userId)}\n      >\n        {`User#${todo.userId}`}\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport './TodoList.scss';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nimport { TodoListType } from '../../react-app-env';\n\nexport const TodoList: React.FC<TodoListType> = ({\n  todos,\n  selectId,\n  activeUser,\n  changeCompleted,\n  filtered,\n  selectFilter,\n}) => {\n  const filteredUsers = () => {\n    return [...todos].filter(todo => {\n      switch (selectFilter) {\n        case 'completedTodos':\n          return todo.completed;\n        case 'notCompletedTodos':\n          return !todo.completed;\n        default:\n          return todo;\n      }\n    }).filter(todo => todo.title.includes(filtered));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredUsers().map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              selectId={selectId}\n              activeUser={activeUser}\n              changeCompleted={changeCompleted}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async () => {\n  const todos = await fetch(`${BASE_URL}/todos`);\n\n  if (!todos.ok) {\n    throw new Error(`Error: ${todos.status}`);\n  }\n\n  return todos.json();\n};\n\nexport const getUser = async (userId: number) => {\n  const user = await fetch(`${BASE_URL}/users/${userId}`);\n\n  if (!user.ok) {\n    throw new Error(`Error: ${user.status}`);\n  }\n\n  return user.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\n\nimport { User } from '../../react-app-env';\n\ntype ICurerntUser = {\n  userId: number,\n};\n\nexport const CurrentUser: React.FC<ICurerntUser> = ({ userId }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then((newUser: User) => setUser(newUser));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user?.id !== userId ? (<h2>Loading...</h2>) : (\n        <>\n          <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${userId}`}</span></h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        </>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api';\n\nimport { Todo } from './react-app-env';\n\nconst App: React.FC = () => {\n  const [filtered, setFiltered] = useState('');\n  const [selectFilter, setSelectFilter] = useState('allTodos');\n  const [selectUserId, setSelectUserId] = useState(0);\n  const [errorFromServer, setErrorFromServer] = useState(false);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(response => setTodos(response))\n      .catch(() => setErrorFromServer(true));\n  }, []);\n\n  const selectNewUser = (id: number) => {\n    setSelectUserId(id);\n  };\n\n  const setNewFilter = (value: string) => {\n    setFiltered(value);\n  };\n\n  const newSelectFilter = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectFilter(e.target.value);\n  };\n\n  const changeCompleted = (todoId: number) => {\n    setTodos([...todos].map((todo) => {\n      if (todo.id === todoId) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    }));\n  };\n\n  useEffect(() => {\n    setTodos([...todos]);\n  }, [filtered, selectFilter, selectUserId]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <button type=\"button\" className=\"button\" onClick={() => setSelectUserId(0)}>Clear</button>\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__nav\">\n          <input\n            type=\"text\"\n            className=\"TodoList__input\"\n            placeholder=\"search\"\n            value={filtered}\n            onChange={(e) => setNewFilter(e.target.value)}\n          />\n          <select name=\"select\" value={selectFilter} onChange={newSelectFilter}>\n            <option defaultValue=\"allTodos\">all</option>\n            <option value=\"completedTodos\">completed</option>\n            <option value=\"notCompletedTodos\">need to complete</option>\n          </select>\n        </div>\n\n        {!errorFromServer ? (\n          <TodoList\n            todos={todos}\n            selectId={selectNewUser}\n            activeUser={selectUserId}\n            changeCompleted={changeCompleted}\n            setNewFilter={setNewFilter}\n            filtered={filtered}\n            selectFilter={selectFilter}\n          />\n        ) : (<p className=\"App__error\">Oops... Can`t read data from server</p>)}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectUserId ? (\n            <CurrentUser\n              userId={selectUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}